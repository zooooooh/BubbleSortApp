BubbleSortApp/
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/
│   │   │       └── bubblesort/
│   │   │           ├── BubbleAppController.java
│   │   │           ├── BubbleSortController.java
│   │   │           ├── SortedArrayController.java
│   │   │           ├── SortedArray.java
│   │   │           └── SortedArrayRepository.java
│   │   ├── resources/
│   │   │   └── static/
│   │   │       └── index.html
│   │   ├── application.properties
│   │   ├── data.sql
├── pom.xml
package com.bubblesort;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BubbleSortApp {

    public static void main(String[] args) {
        SpringApplication.run(BubbleSortApp.class, args);
    }
}
package com.bubblesort;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/sort")
public class BubbleSortController {

    @Autowired
    private SortedArrayRepository sortedArrayRepository;

    @PostMapping("/bubbleSort")
    public List<Integer> bubbleSort(@RequestBody List<Integer> array) {
        // Сортировка пузырьком
        int[] arrayToSort = array.stream().mapToInt(i -> i).toArray();
        bubbleSortAlgorithm(arrayToSort);

        // Сохранение результата в базе данных
        Long sortId = System.currentTimeMillis(); // используем время как уникальный идентификатор для сортировки
        for (int value : arrayToSort) {
            sortedArrayRepository.save(new SortedArray(value, sortId));
        }

        // Возвращаем отсортированный список
        return array;
    }

    // Алгоритм пузырьковой сортировки
    private void bubbleSortAlgorithm(int[] array) {
        boolean swapped;
        do {
            swapped = false;
            for (int i = 0; i < array.length - 1; i++) {
                if (array[i] > array[i + 1]) {
                    int temp = array[i];
                    array[i] = array[i + 1];
                    array[i + 1] = temp;
                    swapped = true;
                }
            }
        } while (swapped);
    }

    @GetMapping("/result/{sortId}")
    public List<SortedArray> getSortedArrayResult(@PathVariable Long sortId) {
        // Получаем результат сортировки по sortId
        return sortedArrayRepository.findBySortId(sortId);
    }
}
package com.bubblesort;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
public class SortedArray {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private Integer value;

    private Long sortId;

    // Конструктор без параметров
    public SortedArray() {
    }

    // Конструктор с параметрами
    public SortedArray(Integer value, Long sortId) {
        this.value = value;
        this.sortId = sortId;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getValue() {
        return value;
    }

    public void setValue(Integer value) {
        this.value = value;
    }

    public Long getSortId() {
        return sortId;
    }

    public void setSortId(Long sortId) {
        this.sortId = sortId;
    }
}
package com.bubblesort;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class SortedArrayController {

    @Autowired
    private SortedArrayRepository sortedArrayRepository;

    // Создание нового элемента
    @GetMapping("/add")
    public String add(@RequestParam Long sortId, @RequestParam int value) {
        SortedArray item = new SortedArray(value, sortId);
        sortedArrayRepository.save(item);
        return "Data saved";
    }
}
package com.bubblesort;

import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface SortedArrayRepository extends JpaRepository<SortedArray, Long> {
    List<SortedArray> findBySortId(Long sortId);
}
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql=TRACE
CREATE TABLE sorted_array (
                              id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                              sort_id BIGINT,
                              "value" INTEGER,
                              PRIMARY KEY (id)
);

объясни как тут все работает